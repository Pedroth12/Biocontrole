library(shiny)
library(leaflet)
library(rinat)
library(dplyr)
library(ggplot2)
library(plotly)
library(tidyr)
library(lubridate)
library(viridis)
library(bslib)
library(stringr)
library(shinyjs)

ui <- fluidPage(
  useShinyjs(),
  theme = bs_theme(
    version = 5,
    primary = "#4E6C50",      # verde musgo
    secondary = "#A98467",    # madeira
    success = "#739072",      # oliva claro
    info = "#B4B4B3",         # cinza suave
    warning = "#D9AE61",      # dourado queimado
    danger = "#A94438",       # vinho-terra
    base_font = font_google("Lato"),
    heading_font = font_google("Playfair Display"),
    code_font = font_google("Fira Code")
  ),
  
  tags$div(
    style = "background-color: #2f2f2f; padding: 20px 10px; border-bottom: 3px solid #4E6C50; margin-bottom: 10px;",
    tags$h1("🍄 Basidiomycota no Brasil 🌎️", 
            style = "margin: 0; color: #e0e0e0; text-align: center; font-family: 'Playfair Display', serif;")
  ),
  
  tabsetPanel(
    tabPanel("Exploração",
             sidebarLayout(
               sidebarPanel(
                 h4("Filtros"),
                 selectInput("quality", "Qualidade da observação:",
                             choices = c("Qualquer" = "any", "Nível de pesquisa" = "research", "Casual" = "casual"),
                             selected = "research"
                 ),
                 uiOutput("species_selector"),
                 uiOutput("year_selector"),
                 uiOutput("state_selector"),
                 actionButton("reset_filters", "Resetar filtros", icon = icon("undo"), class = "btn btn-success")
               ),
               mainPanel(
                 leafletOutput("map", height = 400),
                 br(),
                 actionButton("toggle_legend", "Mostrar/Ocultar Legenda", icon = icon("eye"), class = "btn btn-outline-secondary"),
                 hidden(div(id = "legend_box", uiOutput("custom_legend"))),
                 br(),
                 plotlyOutput("season_plot", height = 250)
               )
             )
    ),
    
    tabPanel("Sobre o Filo",
             br(),
             HTML("
    <div style='padding:20px; max-width:900px; margin:auto; font-family: Lato; line-height:1.6;'>
      <h3 style='font-family: \"Playfair Display\";'>🍄 Filo Basidiomycota</h3>
      
      <p><strong>Basidiomycota</strong> é um dos principais filos do Reino Fungi, com cerca de 30.000 espécies descritas. É conhecido por incluir a maioria dos cogumelos visíveis a olho nu, como os champignons, orelhas-de-pau (<em>Auricularia</em>), puffballs e os tradicionais cogumelos de chapéu.</p>
      
      <h4>✨ Características gerais:</h4>
      <ul>
        <li>Produzem esporos sexualmente em estruturas chamadas <strong>basídios</strong>.</li>
        <li>Possuem hifas septadas e um ciclo de vida complexo, frequentemente com fase dicariótica prolongada.</li>
        <li>Muitos formam corpos frutíferos (basidiocarpos), como os cogumelos, essenciais para reprodução.</li>
      </ul>

      <h4>🌿 Importância ecológica e econômica:</h4>
      <ul>
        <li><strong>Decompositores:</strong> fundamentais na ciclagem de nutrientes, especialmente madeira e folhas.</li>
        <li><strong>Micorrízicos:</strong> muitas espécies (como <em>Boletus</em>, <em>Amanita</em>, <em>Russula</em>) formam simbioses com raízes de árvores.</li>
        <li><strong>Fitopatógenos:</strong> incluem ferrugens (<em>Puccinia</em>) e carvões (<em>Ustilago</em>), importantes pragas agrícolas.</li>
        <li><strong>Comestíveis e medicinais:</strong> incluem espécies como <em>Lentinula edodes</em> (shitake), <em>Ganoderma lucidum</em> (reishi) e <em>Pleurotus ostreatus</em> (shimeji).</li>
      </ul>

      <h4>📍 No Brasil:</h4>
      <p>O Brasil abriga uma diversidade ainda pouco conhecida de Basidiomycota. Muitos registros vêm sendo feitos por pesquisadores e cidadãos cientistas, contribuindo com plataformas como o <a href='https://www.inaturalist.org' target='_blank'>iNaturalist</a>.</p>
      
      <p>Este aplicativo tem como objetivo facilitar a visualização e compreensão da distribuição dos basidiomicetos no território brasileiro, incentivando o interesse pela micologia e pela conservação dos fungos.</p>

      <blockquote style='font-style: italic; color: #666; margin-top: 20px;'>
        \"Conhecer os fungos é também conhecer o funcionamento profundo da vida nos ecossistemas.\" 🍃
      </blockquote>
    </div>
  ")
    ),
    
    tabPanel("Curiosidades",
             br(),
             HTML("
    <div style='padding:20px; max-width:900px; margin:auto; font-family: Lato; line-height:1.6;'>
      <h3 style='font-family: \"Playfair Display\";'>🔍 Curiosidades sobre Basidiomycota</h3>

      <ul>
        <li>🍄 Alguns basidiomicetos podem crescer em poucas horas após uma chuva — sim, cogumelos são apressados quando têm sede!</li>
        <li>🎩 O maior organismo do mundo é um fungo basidiomiceto! <em>Armillaria ostoyae</em> cobre mais de 9 km² em Oregon, EUA.</li>
        <li>🌌 Espécies como <em>Mycena chlorophos</em> brilham no escuro — é a bioluminescência em ação!</li>
        <li>🪶 O pó fino que sai dos cogumelos? São esporos — e podem ser lançados em explosões de pressão interna como em <em>Lycoperdon</em>.</li>
        <li>⚔️ Algumas espécies são predadoras: <em>Coprinopsis cinerea</em> pode capturar nematoides com estruturas especializadas.</li>
        <li>💊 Muitos fungos medicinais vêm dos basidiomicetos, como o <em>Ganoderma lucidum</em> (reishi), usado na medicina tradicional há milênios.</li>
        <li>🌳 Fungos micorrízicos ajudam árvores a crescer trocando nutrientes por açúcares — uma verdadeira amizade fúngica-vegetal.</li>
      </ul>

      <p style='color:#666; font-style: italic;'>Esses organismos são muito mais do que \"cogumelos bonitos\" — são engenheiros ecológicos essenciais.</p>
    </div>
  ")
    ),
    
    tabPanel("Ajuda",
             br(),
             HTML("
        <div style='padding:20px; max-width:800px; margin:auto; font-family: Lato;'>
          <h3>❓ Como usar o aplicativo</h3>
          <ul>
            <li><strong>Filtros:</strong> escolha uma espécie, ano ou estado.</li>
            <li><strong>Mapa:</strong> os pontos mostram observações, com fotos e dados.</li>
            <li><strong>Legenda:</strong> você pode mostrar ou ocultá-la clicando no botão.</li>
            <li><strong>Gráfico de sazonalidade:</strong> veja em quais meses há mais registros.</li>
          </ul>
          <p>Dados obtidos do <a href='https://www.inaturalist.org' target='_blank'>iNaturalist</a>.</p>
        </div>
      ")
    )
  )
)

server <- function(input, output, session) {
  
  # Cache dos dados para melhor performance
  basidio_cache <- reactiveVal(NULL)
  
  # Carregar dados apenas uma vez ao iniciar
  observe({
    if (is.null(basidio_cache())) {
      showNotification("Carregando dados do iNaturalist...", duration = NULL, id = "loading", type = "message")
      
      # Coordenadas mais precisas para o Brasil
      brazil_bounds <- c(-33.75, -73.99, 5.27, -34.0)  # Norte, Oeste, Sul, Leste
      
      data <- tryCatch({
        rinat::get_inat_obs(
          taxon_name = "Basidiomycota",
          quality = "research",  # Padrão para research grade
          bounds = brazil_bounds,
          maxresults = 10000  # Aumentando limite
        )
      }, error = function(e) {
        message("Erro ao buscar dados: ", e$message)
        return(data.frame())
      })
      
      removeNotification(id = "loading")
      
      if (is.null(data) || nrow(data) == 0) {
        showNotification("Nenhum dado encontrado ou erro na conexão.", type = "error")
        return(data.frame())
      }
      
      # Processamento dos dados
      processed_data <- data %>%
        filter(!is.na(latitude), !is.na(longitude), !is.na(observed_on)) %>%
        mutate(
          observed_on = as_date(observed_on),
          observed_year = year(observed_on),
          observed_month = month(observed_on),
          state = str_trim(word(place_guess, -2, sep = ",")),
          state = ifelse(is.na(state) | state == "", "Desconhecido", state),
          image_url = ifelse(is.na(image_url), NA, image_url),
          scientific_name = ifelse(is.na(scientific_name), "Não identificado", scientific_name)
        ) %>%
        # Filtro adicional para garantir que está dentro do Brasil
        filter(
          latitude >= -33.75 & latitude <= 5.27,
          longitude >= -73.99 & longitude <= -34.0
        )
      
      basidio_cache(processed_data)
    }
  })
  
  # Dados reativos filtrados
  basidio_data <- reactive({
    req(basidio_cache())
    basidio_cache()
  })
  
  observeEvent(input$reset_filters, {
    data <- basidio_data()
    if (nrow(data) == 0) return()
    updateSelectInput(session, "species", selected = "")
    updateSelectInput(session, "state", selected = "")
    updateSliderInput(session, "year_range",
                      value = c(min(data$observed_year, na.rm = TRUE),
                                max(data$observed_year, na.rm = TRUE)))
  })
  
  output$species_selector <- renderUI({
    data <- basidio_data()
    req(nrow(data) > 0)
    species_choices <- sort(unique(data$scientific_name))
    selectInput("species", "Espécie:", choices = c("Todas" = "", species_choices))
  })
  
  output$year_selector <- renderUI({
    data <- basidio_data()
    req(nrow(data) > 0)
    sliderInput("year_range", "Ano da observação:",
                min = min(data$observed_year, na.rm = TRUE),
                max = max(data$observed_year, na.rm = TRUE),
                value = c(min(data$observed_year, na.rm = TRUE),
                          max(data$observed_year, na.rm = TRUE)), sep = "")
  })
  
  output$state_selector <- renderUI({
    data <- basidio_data()
    req(nrow(data) > 0)
    state_choices <- sort(unique(data$state))
    selectInput("state", "Estado:", choices = c("Todos" = "", state_choices))
  })
  
  filtered_data <- reactive({
    data <- basidio_data()
    req(nrow(data) > 0)
    
    if (!is.null(input$species) && input$species != "") {
      data <- filter(data, scientific_name == input$species)
    }
    if (!is.null(input$year_range)) {
      data <- filter(data, between(observed_year, input$year_range[1], input$year_range[2]))
    }
    if (!is.null(input$state) && input$state != "") {
      data <- filter(data, state == input$state)
    }
    if (!is.null(input$quality) && input$quality != "any") {
      data <- filter(data, quality_grade == input$quality)
    }
    data
  })
  
  species_palette <- reactive({
    data <- filtered_data()
    req(nrow(data) > 0)
    colorFactor(palette = viridis(length(unique(data$scientific_name))),
                domain = data$scientific_name)
  })
  
  output$map <- renderLeaflet({
    data <- filtered_data()
    if (nrow(data) == 0) return(leaflet() %>% addTiles())
    pal <- species_palette()
    
    leaflet(data) %>%
      addProviderTiles(providers$CartoDB.Positron) %>%
      setView(lng = -53, lat = -15, zoom = 4) %>%
      addCircleMarkers(
        ~longitude, ~latitude,
        radius = 5,
        color = ~pal(scientific_name),
        fillOpacity = 0.8,
        popup = ~paste0(
          "<b>Espécie:</b> ", scientific_name, "<br>",
          "<b>Data:</b> ", observed_on, "<br>",
          "<b>Local:</b> ", place_guess, "<br><br>",
          ifelse(!is.na(image_url),
                 paste0("<img src='", image_url, "' width='200' style='border-radius:8px;'>"),
                 "Sem imagem disponível")
        )
      )
  })
  
  observeEvent(input$toggle_legend, {
    toggle("legend_box")
  })
  
  output$custom_legend <- renderUI({
    data <- filtered_data()
    req(nrow(data) > 0)
    pal <- species_palette()
    species <- sort(unique(data$scientific_name))
    
    tags$div(
      style = "
        max-width: 300px;
        margin-top: 10px;
        padding: 10px;
        background-color: #ffffffcc;
        border-radius: 10px;
        border: 1px solid #ccc;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1);",
      tags$h5("Legenda de Espécies", style = "margin-top:0;"),
      tags$ul(
        style = "list-style: none; padding-left: 0; margin: 0;",
        lapply(species, function(sp) {
          tags$li(
            style = "display: flex; align-items: center; margin-bottom: 6px;",
            tags$span(
              style = paste0("width: 16px; height: 16px; background-color: ",
                             pal(sp), "; display: inline-block; margin-right: 8px;
                           border-radius: 3px; border: 1px solid #444;")
            ),
            tags$span(sp)
          )
        })
      )
    )
  })
  
  output$season_plot <- renderPlotly({
    data <- filtered_data()
    if (nrow(data) == 0) return(NULL)
    
    month_counts <- data %>%
      count(observed_month) %>%
      complete(observed_month = 1:12, fill = list(n = 0)) %>%
      mutate(month = factor(month.abb[observed_month], levels = month.abb))
    
    p <- ggplot(month_counts, aes(x = month, y = n)) +
      geom_col(fill = "#4E6C50") +
      labs(title = "Observações por mês", x = "Mês", y = "Nº de observações") +
      theme_minimal(base_family = "Lato")
    
    ggplotly(p, tooltip = c("x", "y"))
  })
}

shinyApp(ui, server)